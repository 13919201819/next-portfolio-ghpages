// import type { NextApiRequest, NextApiResponse } from "next";

// export default async function handler(req: NextApiRequest, res: NextApiResponse) {
//   if (req.method !== "POST") {
//     return res.status(405).json({ error: "Method not allowed" });
//   }

//   const { message } = req.body;

//   if (!message) {
//     return res.status(400).json({ error: "Message is required" });
//   }

//   try {
//     // Format the input for Llama-3.3-70B-Instruct using a chat template
//     const messages = [
//       {
//         role: "system",
//         content: "You are a helpful AI assistant for CLUMOSS, an AI & Innovation Hub. Answer the following user query in a professional, concise, and friendly manner.",
//       },
//       { role: "user", content: message },
//     ];

//     const response = await fetch("https://api-inference.huggingface.co/models/meta-llama/Llama-3.3-70B-Instruct", {
//       method: "POST",
//       headers: {
//         Authorization: `Bearer ${process.env.HUGGING_FACE_TOKEN}`,
//         "Content-Type": "application/json",
//       },
//       body: JSON.stringify({
//         inputs: messages,
//         parameters: {
//           max_new_tokens: 150,
//           temperature: 0.7,
//           top_p: 0.9,
//           repetition_penalty: 1.2,
//           return_full_text: false,
//         },
//       }),
//     });

//     // Check the content type of the response
//     const contentType = response.headers.get("content-type") || "";
//     if (!contentType.includes("application/json")) {
//       const text = await response.text();
//       throw new Error(`Unexpected response format: ${contentType}. Response: ${text.slice(0, 100)}...`);
//     }

//     const responseData = await response.json();

//     if (!response.ok) {
//       throw new Error(`Hugging Face API error: ${response.status} - ${JSON.stringify(responseData)}`);
//     }

//     const aiResponse = responseData[0]?.generated_text || "No response generated by the model.";

//     res.status(200).json({
//       response: aiResponse,
//       status: response.status,
//       rawResponse: responseData,
//     });
//   } catch (error: any) {
//     console.error("Error calling Hugging Face API:", error);
//     res.status(500).json({
//       error: error.message || "Failed to fetch response from Hugging Face API",
//       status: error.status || 500,
//       rawResponse: null,
//     });
//   }
// }